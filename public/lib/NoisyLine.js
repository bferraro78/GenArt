/**
 * In perlin noise function:
 * noiseLevel = how much to multiple the 0-1 value generated by noise.
 *      the higher the level, the bigger the jump in random numbers
 * 
 * noiseScale = how "fast" your perlinNoise will move through its loaded set
 *      of perlinNoise values. New values generated each time program loads since
 *      pj5 will re-seed the perlin noise space
 * 
 *      video: https://youtu.be/YcdldZ1E9gU?si=uK29D7xMriqAuggd&t=563
 * 
 *  noise(nx, nt) - One dimension 
 */

let deltaLine = 0.01;
// rounding error in JS, needs this number of 0s to correct to ensure
// start and end are the same
let tMaxLine = 1.00001;

/**
 * 
 * @param {int} startX 
 * @param {int} startY 
 * @param {int} endX
 * @param {int} endY
 * @param {int} noiseLevel
 * @param {double} noiseScale 
 * @returns 
 */
function noisyLineByCoordinates(startX, startY, endX, endY, noiseLevel, noiseScale) {
    var yoffSetLine = 0;

    for (let t = 0; t <= tMaxLine; t += deltaLine) {

        let linePointX = lerp(startX, endX, t);
        let linePointY = lerp(startY, endY, t);

        let nt = noiseScale * frameCount;

        let yNoise = noise(yoffSetLine, nt);
        let noisyY = yNoise * noiseLevel + linePointY;

        vertex(linePointX, noisyY);

        yoffSetLine += noiseScale;
    }

    // TODO: Could return start and end to ensure we close shaped properly
    return [];
}






